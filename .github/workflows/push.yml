name: Build & Deploy

on:
  push:
    branches:
      - develop
      - feature/cdk-integration
  merge_group:
    branches:
      - develop

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

env:
  SERVICE_NAME: multicarrier-email-api
  ACCOUNT_ID: ${{ vars.ACCOUNT_ID }}
  MC_EMAIL_EFS_FOLDER_NAME: ${{ vars.MC_EMAIL_EFS_FOLDER_NAME }}
  MD_REST_EFS_FOLDER_NAME: ${{ vars.MD_REST_EFS_FOLDER_NAME }}
  SERVICE_CONTAINER_PORT: ${{ vars.SERVICE_CONTAINER_PORT }}
  SERVICE_HOST_PORT: ${{ vars.SERVICE_HOST_PORT }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Select Environment
        run: |
          if [ "${{ github.ref }}" == "refs/heads/master" ]; then
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
            echo "SERVICE_CPU=${{ vars.PROD_SERVICE_CPU }}" >> $GITHUB_ENV
            echo "SERVICE_MEMORY=${{ vars.PROD_SERVICE_MEMORY }}" >> $GITHUB_ENV
            echo "OUTBOX_TABLE_NAME_PARAMETER_NAME=${{ vars.PROD_OUTBOX_TABLE_NAME_PARAMETER_NAME }}" >> $GITHUB_ENV
            echo "MC_EML_EFS_ACCESS_POINT_ARN_PARAMETER_NAME=${{ vars.PROD_MC_EML_EFS_ACCESS_POINT_ARN_PARAMETER_NAME }}" >> $GITHUB_ENV
            echo "MC_EML_EFS_ACCESS_POINT_ID_PARAMETER_NAME=${{ vars.PROD_MC_EML_EFS_ACCESS_POINT_ID_PARAMETER_NAME }}" >> $GITHUB_ENV
            echo "MC_EML_EFS_ID_PARAMETER_NAME=${{ vars.PROD_MC_EML_EFS_ID_PARAMETER_NAME }}" >> $GITHUB_ENV
            echo "REPOSITORY_NAME_PARAMETER_NAME=${{ vars.PROD_REPOSITORY_NAME_PARAMETER_NAME }}" >> $GITHUB_ENV
            echo "MD_REST_EFS_ID_PARAMETER_NAME=${{ vars.PROD_MD_REST_EFS_ID_PARAMETER_NAME }}" >> $GITHUB_ENV
            echo "MD_REST_ACCESS_POINT_ID_PARAMETER_NAME=${{ vars.PROD_MD_REST_ACCESS_POINT_ID_PARAMETER_NAME }}" >> $GITHUB_ENV
            echo "MD_REST_ACCESS_POINT_ARN_PARAMETER_NAME=${{ vars.PROD_MD_REST_ACCESS_POINT_ARN_PARAMETER_NAME }}" >> $GITHUB_ENV
            echo "TASK_DEFINITION_ARN_PARAMETER_NAME=${{ vars.PROD_TASK_DEFINITION_ARN_PARAMETER_NAME }}" >> $GITHUB_ENV
            echo "TMP_TASK_DEFINITION_ARN_PARAMETER_NAME=${{ vars.PROD_TMP_TASK_DEFINITION_ARN_PARAMETER_NAME }}" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" == "refs/heads/feature/cdk-integration" ]; then
            echo "ENVIRONMENT=stage" >> $GITHUB_ENV
            echo "SERVICE_CPU=${{ vars.STAGE_SERVICE_CPU }}" >> $GITHUB_ENV
            echo "SERVICE_MEMORY=${{ vars.STAGE_SERVICE_MEMORY }}" >> $GITHUB_ENV
            echo "OUTBOX_TABLE_NAME_PARAMETER_NAME=${{ vars.STAGE_OUTBOX_TABLE_NAME_PARAMETER_NAME }}" >> $GITHUB_ENV
            echo "MC_EML_EFS_ACCESS_POINT_ARN_PARAMETER_NAME=${{ vars.STAGE_MC_EML_EFS_ACCESS_POINT_ARN_PARAMETER_NAME }}" >> $GITHUB_ENV
            echo "MC_EML_EFS_ACCESS_POINT_ID_PARAMETER_NAME=${{ vars.STAGE_MC_EML_EFS_ACCESS_POINT_ID_PARAMETER_NAME }}" >> $GITHUB_ENV
            echo "MC_EML_EFS_ID_PARAMETER_NAME=${{ vars.STAGE_MC_EML_EFS_ID_PARAMETER_NAME }}" >> $GITHUB_ENV
            echo "REPOSITORY_NAME_PARAMETER_NAME=${{ vars.STAGE_REPOSITORY_NAME_PARAMETER_NAME }}" >> $GITHUB_ENV
            echo "MD_REST_EFS_ID_PARAMETER_NAME=${{ vars.STAGE_MD_REST_EFS_ID_PARAMETER_NAME }}" >> $GITHUB_ENV
            echo "MD_REST_ACCESS_POINT_ID_PARAMETER_NAME=${{ vars.STAGE_MD_REST_ACCESS_POINT_ID_PARAMETER_NAME }}" >> $GITHUB_ENV
            echo "MD_REST_ACCESS_POINT_ARN_PARAMETER_NAME=${{ vars.STAGE_MD_REST_ACCESS_POINT_ARN_PARAMETER_NAME }}" >> $GITHUB_ENV
            echo "TASK_DEFINITION_ARN_PARAMETER_NAME=${{ vars.STAGE_TASK_DEFINITION_ARN_PARAMETER_NAME }}" >> $GITHUB_ENV
            echo "TMP_TASK_DEFINITION_ARN_PARAMETER_NAME=${{ vars.STAGE_TMP_TASK_DEFINITION_ARN_PARAMETER_NAME }}" >> $GITHUB_ENV
          fi
          cat $GITHUB_ENV

      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.OIDC_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      # Step 3: Login to ECR registry
      - name: Login ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Step 4: Build & push image
      - name: Image build
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_NAME: ${{ env.ENVIRONMENT }}-${{ env.SERVICE_NAME }}
        run: |
          docker build -t "$IMAGE_NAME:latest" -f Dockerfile .
          docker tag $IMAGE_NAME:latest $ECR_REGISTRY/$IMAGE_NAME:latest
          docker tag $IMAGE_NAME:latest $ECR_REGISTRY/$IMAGE_NAME:$GITHUB_SHA
          docker push $ECR_REGISTRY/$IMAGE_NAME --all-tags
          echo "image=$ECR_REGISTRY/$IMAGE_NAME:$GITHUB_SHA" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=$GITHUB_SHA" >> $GITHUB_ENV

      # Step 5: Deploy updated task definition stack
      - name: Deploy CDK Stack
        uses: arnaskro/aws-cdk-v2-github-actions@v2.3.0
        with:
          cdk_subcommand: 'deploy'
          cdk_args: '-c environment=${{ env.ENVIRONMENT }} -c image_tag=${{ env.IMAGE_TAG }} --require-approval never'
          actions_comment: false
          working_dir: cdk

      # Step 6: Retrieve updated temporary task definition arn
      - name: Retrieve image updated task definition
        id: get-updated-tmp-task-definition
        run: |
          TMP_TASK_DEFINITION_ARN=$(aws ssm get-parameter --name ${{ env.TMP_TASK_DEFINITION_ARN_PARAMETER_NAME }} --query Parameter.Value --output text)
          echo "task-definition-arn=$TMP_TASK_DEFINITION_ARN" >> $GITHUB_OUTPUT

      # Step 7: Get updated temporary task definition json
      - name: Get task definition json
        env:
          TASK_DEFINITION_ARN: ${{ steps.get-updated-tmp-task-definition.outputs.task-definition-arn }}
        run: |
          aws ecs describe-task-definition \
          --task-definition $TASK_DEFINITION_ARN \
          --query taskDefinition > task-definition.json

      # Step 8: Deploy the task definition
      - name: Render updated temporary task definition
        id: rendered-task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.SERVICE_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy
        id: task-definition-deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: task-definition.json
          service: ${{ env.SERVICE_NAME }}
          cluster: ${{ env.ENVIRONMENT }}
          wait-for-service-stability: true

      # Step 9: Update task definition ssm parameter
      - name: Update the task definition ssm parameter
        if: success()
        run: |
          aws ssm put-parameter \
          --name ${{ env.TASK_DEFINITION_ARN_PARAMETER_NAME }} \
          --value ${{ steps.get-updated-tmp-task-definition.outputs.task-definition-arn }} \
          --type String \
          --overwrite

      - name: Delete task definition if deploy fails
        if: failure()
        run: |
          aws ecs deregister-task-definition \
          --task-definition ${{ steps.get-updated-tmp-task-definition.outputs.task-definition-arn }}
          


